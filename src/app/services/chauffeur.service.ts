// src/app/services/chauffeur.service.ts

import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root',
})
export class ChauffeurService {
  private apiUrl = 'http://localhost:8082/api/chauffeurs'; // ‚û§ √Ä adapter si besoin

  constructor(private http: HttpClient) {}

  // üîê R√©cup√©rer les headers avec le token JWT
  private getHeaders(): HttpHeaders {
    const token = localStorage.getItem('token');
    return new HttpHeaders({
      Authorization: `Bearer ${token}`,
    });
  }

  // ‚úÖ Obtenir tous les chauffeurs (authentifi√©)
  getAllChauffeurs(): Observable<any[]> {
    return this.http.get<any[]>(this.apiUrl, {
      headers: this.getHeaders(),
    });
  }

  // ‚úÖ Obtenir un chauffeur par son ID (authentifi√©)
  getChauffeurById(id: number): Observable<any> {
    return this.http.get<any>(`${this.apiUrl}/${id}`, {
      headers: this.getHeaders(),
    });
  }

  // ‚úÖ Ajouter un chauffeur avec une photo (authentifi√©)
  addChauffeur(chauffeurData: any, photo: File): Observable<any> {
    const formData = new FormData();
    formData.append('chauffeur', JSON.stringify(chauffeurData));
    formData.append('photo', photo);

    // ‚ö†Ô∏è Ne pas d√©finir manuellement le Content-Type pour FormData
    return this.http.post(this.apiUrl, formData, {
      headers: this.getHeaders(),
    });
  }

  // ‚úÖ Mettre √† jour un chauffeur (authentifi√©)
  updateChauffeur(id: number, chauffeur: any): Observable<any> {
    return this.http.put<any>(`${this.apiUrl}/${id}`, chauffeur, {
      headers: this.getHeaders(),
    });
  }

  // ‚úÖ Supprimer un chauffeur (authentifi√©)
  deleteChauffeur(id: number): Observable<void> {
    return this.http.delete<void>(`${this.apiUrl}/${id}`, {
      headers: this.getHeaders(),
    });
  }
}
